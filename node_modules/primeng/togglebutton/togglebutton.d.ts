import { EventEmitter, AfterViewInit, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare const TOGGLEBUTTON_VALUE_ACCESSOR: any;
export declare class ToggleButton implements ControlValueAccessor, AfterViewInit {
    onLabel: string;
    offLabel: string;
    onIcon: string;
    offIcon: string;
    ariaLabelledBy: string;
    disabled: boolean;
    style: any;
    styleClass: string;
    inputId: string;
    tabindex: number;
    iconPos: string;
    onChange: EventEmitter<any>;
    checkboxViewChild: ElementRef;
    checkbox: HTMLInputElement;
    checked: boolean;
    focus: boolean;
    onModelChange: Function;
    onModelTouched: Function;
    ngAfterViewInit(): void;
    toggle(event: Event): void;
    onFocus(): void;
    onBlur(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    readonly hasOnLabel: boolean;
    readonly hasOffLabel: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToggleButton>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ToggleButton, "p-toggleButton", never, {
    "onLabel": "onLabel";
    "offLabel": "offLabel";
    "iconPos": "iconPos";
    "disabled": "disabled";
    "onIcon": "onIcon";
    "offIcon": "offIcon";
    "ariaLabelledBy": "ariaLabelledBy";
    "style": "style";
    "styleClass": "styleClass";
    "inputId": "inputId";
    "tabindex": "tabindex";
}, {
    "onChange": "onChange";
}, never>;
}
export declare class ToggleButtonModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ToggleButtonModule, [typeof ToggleButton], [typeof ɵngcc1.CommonModule], [typeof ToggleButton]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ToggleButtonModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlYnV0dG9uLmQudHMiLCJzb3VyY2VzIjpbInRvZ2dsZWJ1dHRvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4QkE7Ozs7QUFFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBUT0dHTEVCVVRUT05fVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRvZ2dsZUJ1dHRvbiBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBZnRlclZpZXdJbml0IHtcbiAgICBvbkxhYmVsOiBzdHJpbmc7XG4gICAgb2ZmTGFiZWw6IHN0cmluZztcbiAgICBvbkljb246IHN0cmluZztcbiAgICBvZmZJY29uOiBzdHJpbmc7XG4gICAgYXJpYUxhYmVsbGVkQnk6IHN0cmluZztcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBzdHlsZTogYW55O1xuICAgIHN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBpbnB1dElkOiBzdHJpbmc7XG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICBpY29uUG9zOiBzdHJpbmc7XG4gICAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNoZWNrYm94Vmlld0NoaWxkOiBFbGVtZW50UmVmO1xuICAgIGNoZWNrYm94OiBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGNoZWNrZWQ6IGJvb2xlYW47XG4gICAgZm9jdXM6IGJvb2xlYW47XG4gICAgb25Nb2RlbENoYW5nZTogRnVuY3Rpb247XG4gICAgb25Nb2RlbFRvdWNoZWQ6IEZ1bmN0aW9uO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHRvZ2dsZShldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIG9uRm9jdXMoKTogdm9pZDtcbiAgICBvbkJsdXIoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IEZ1bmN0aW9uKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUodmFsOiBib29sZWFuKTogdm9pZDtcbiAgICByZWFkb25seSBoYXNPbkxhYmVsOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGhhc09mZkxhYmVsOiBib29sZWFuO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9nZ2xlQnV0dG9uTW9kdWxlIHtcbn1cbiJdfQ==