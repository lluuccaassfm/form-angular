import { ElementRef, AfterViewInit, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/inputtext';
export declare const SPINNER_VALUE_ACCESSOR: any;
export declare class Spinner implements AfterViewInit, ControlValueAccessor {
    el: ElementRef;
    cd: ChangeDetectorRef;
    onChange: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    step: number;
    min: number;
    max: number;
    maxlength: number;
    size: number;
    placeholder: string;
    inputId: string;
    disabled: boolean;
    readonly: boolean;
    tabindex: number;
    required: boolean;
    name: string;
    ariaLabelledBy: string;
    inputStyle: any;
    inputStyleClass: string;
    formatInput: boolean;
    decimalSeparator: string;
    thousandSeparator: string;
    value: any;
    formattedValue: string;
    onModelChange: Function;
    onModelTouched: Function;
    keyPattern: RegExp;
    precision: number;
    timer: any;
    focus: boolean;
    filled: boolean;
    negativeSeparator: string;
    localeDecimalSeparator: string;
    localeThousandSeparator: string;
    thousandRegExp: RegExp;
    inputfieldViewChild: ElementRef;
    constructor(el: ElementRef, cd: ChangeDetectorRef);
    ngAfterViewInit(): void;
    repeat(event: Event, interval: number, dir: number): void;
    spin(event: Event, dir: number): void;
    toFixed(value: number, precision: number): string;
    onUpButtonMousedown(event: Event): void;
    onUpButtonMouseup(event: Event): void;
    onUpButtonMouseleave(event: Event): void;
    onDownButtonMousedown(event: Event): void;
    onDownButtonMouseup(event: Event): void;
    onDownButtonMouseleave(event: Event): void;
    onInputKeydown(event: KeyboardEvent): void;
    onInputChange(event: Event): void;
    onInput(event: KeyboardEvent): void;
    onInputBlur(event: any): void;
    onInputFocus(event: any): void;
    parseValue(val: string): number;
    formatValue(): void;
    clearTimer(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    updateFilledState(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Spinner>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Spinner, "p-spinner", never, {
    "step": "step";
    "disabled": "disabled";
    "min": "min";
    "max": "max";
    "maxlength": "maxlength";
    "size": "size";
    "placeholder": "placeholder";
    "inputId": "inputId";
    "readonly": "readonly";
    "tabindex": "tabindex";
    "required": "required";
    "name": "name";
    "ariaLabelledBy": "ariaLabelledBy";
    "inputStyle": "inputStyle";
    "inputStyleClass": "inputStyleClass";
    "formatInput": "formatInput";
    "decimalSeparator": "decimalSeparator";
    "thousandSeparator": "thousandSeparator";
}, {
    "onChange": "onChange";
    "onFocus": "onFocus";
    "onBlur": "onBlur";
}, never>;
}
export declare class SpinnerModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<SpinnerModule, [typeof Spinner], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.InputTextModule], [typeof Spinner]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<SpinnerModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5kLnRzIiwic291cmNlcyI6WyJzcGlubmVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErREE7Ozs7QUFFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQsIEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgU1BJTk5FUl9WQUxVRV9BQ0NFU1NPUjogYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3Bpbm5lciBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBlbDogRWxlbWVudFJlZjtcbiAgICBjZDogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgc3RlcDogbnVtYmVyO1xuICAgIG1pbjogbnVtYmVyO1xuICAgIG1heDogbnVtYmVyO1xuICAgIG1heGxlbmd0aDogbnVtYmVyO1xuICAgIHNpemU6IG51bWJlcjtcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIGlucHV0SWQ6IHN0cmluZztcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICByZWFkb25seTogYm9vbGVhbjtcbiAgICB0YWJpbmRleDogbnVtYmVyO1xuICAgIHJlcXVpcmVkOiBib29sZWFuO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBhcmlhTGFiZWxsZWRCeTogc3RyaW5nO1xuICAgIGlucHV0U3R5bGU6IGFueTtcbiAgICBpbnB1dFN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBmb3JtYXRJbnB1dDogYm9vbGVhbjtcbiAgICBkZWNpbWFsU2VwYXJhdG9yOiBzdHJpbmc7XG4gICAgdGhvdXNhbmRTZXBhcmF0b3I6IHN0cmluZztcbiAgICB2YWx1ZTogYW55O1xuICAgIGZvcm1hdHRlZFZhbHVlOiBzdHJpbmc7XG4gICAgb25Nb2RlbENoYW5nZTogRnVuY3Rpb247XG4gICAgb25Nb2RlbFRvdWNoZWQ6IEZ1bmN0aW9uO1xuICAgIGtleVBhdHRlcm46IFJlZ0V4cDtcbiAgICBwcmVjaXNpb246IG51bWJlcjtcbiAgICB0aW1lcjogYW55O1xuICAgIGZvY3VzOiBib29sZWFuO1xuICAgIGZpbGxlZDogYm9vbGVhbjtcbiAgICBuZWdhdGl2ZVNlcGFyYXRvcjogc3RyaW5nO1xuICAgIGxvY2FsZURlY2ltYWxTZXBhcmF0b3I6IHN0cmluZztcbiAgICBsb2NhbGVUaG91c2FuZFNlcGFyYXRvcjogc3RyaW5nO1xuICAgIHRob3VzYW5kUmVnRXhwOiBSZWdFeHA7XG4gICAgaW5wdXRmaWVsZFZpZXdDaGlsZDogRWxlbWVudFJlZjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICByZXBlYXQoZXZlbnQ6IEV2ZW50LCBpbnRlcnZhbDogbnVtYmVyLCBkaXI6IG51bWJlcik6IHZvaWQ7XG4gICAgc3BpbihldmVudDogRXZlbnQsIGRpcjogbnVtYmVyKTogdm9pZDtcbiAgICB0b0ZpeGVkKHZhbHVlOiBudW1iZXIsIHByZWNpc2lvbjogbnVtYmVyKTogc3RyaW5nO1xuICAgIG9uVXBCdXR0b25Nb3VzZWRvd24oZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBvblVwQnV0dG9uTW91c2V1cChldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIG9uVXBCdXR0b25Nb3VzZWxlYXZlKGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgb25Eb3duQnV0dG9uTW91c2Vkb3duKGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgb25Eb3duQnV0dG9uTW91c2V1cChldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIG9uRG93bkJ1dHRvbk1vdXNlbGVhdmUoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBvbklucHV0S2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgb25JbnB1dENoYW5nZShldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIG9uSW5wdXQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIG9uSW5wdXRCbHVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uSW5wdXRGb2N1cyhldmVudDogYW55KTogdm9pZDtcbiAgICBwYXJzZVZhbHVlKHZhbDogc3RyaW5nKTogbnVtYmVyO1xuICAgIGZvcm1hdFZhbHVlKCk6IHZvaWQ7XG4gICAgY2xlYXJUaW1lcigpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZSh2YWw6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHVwZGF0ZUZpbGxlZFN0YXRlKCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTcGlubmVyTW9kdWxlIHtcbn1cbiJdfQ==