import { AfterContentInit, OnInit, OnDestroy, EventEmitter, TemplateRef, QueryList, ElementRef, NgZone, AfterViewInit, AfterViewChecked, OnChanges, SimpleChanges } from '@angular/core';
import { TreeNode } from 'primeng/api';
import { Subscription } from 'rxjs';
import { PrimeTemplate } from 'primeng/api';
import { SortMeta } from 'primeng/api';
import { BlockableUI } from 'primeng/api';
import { FilterMetadata } from 'primeng/api';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/paginator';
import * as ɵngcc3 from 'primeng/api';
export declare class TreeTableService {
    private sortSource;
    private selectionSource;
    private contextMenuSource;
    private uiUpdateSource;
    private totalRecordsSource;
    sortSource$: import("rxjs").Observable<SortMeta | SortMeta[]>;
    selectionSource$: import("rxjs").Observable<unknown>;
    contextMenuSource$: import("rxjs").Observable<any>;
    uiUpdateSource$: import("rxjs").Observable<any>;
    totalRecordsSource$: import("rxjs").Observable<any>;
    onSort(sortMeta: SortMeta | SortMeta[]): void;
    onSelectionChange(): void;
    onContextMenu(node: any): void;
    onUIUpdate(value: any): void;
    onTotalRecordsChange(value: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeTableService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<TreeTableService>;
}
export declare class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI, OnChanges {
    el: ElementRef;
    zone: NgZone;
    tableService: TreeTableService;
    columns: any[];
    style: any;
    styleClass: string;
    autoLayout: boolean;
    lazy: boolean;
    paginator: boolean;
    rows: number;
    first: number;
    pageLinks: number;
    rowsPerPageOptions: any[];
    alwaysShowPaginator: boolean;
    paginatorPosition: string;
    paginatorDropdownAppendTo: any;
    defaultSortOrder: number;
    sortMode: string;
    resetPageOnSort: boolean;
    customSort: boolean;
    selectionMode: string;
    selectionChange: EventEmitter<any>;
    contextMenuSelection: any;
    contextMenuSelectionChange: EventEmitter<any>;
    contextMenuSelectionMode: string;
    dataKey: string;
    metaKeySelection: boolean;
    compareSelectionBy: string;
    rowHover: boolean;
    loading: boolean;
    loadingIcon: string;
    showLoader: boolean;
    scrollable: boolean;
    scrollHeight: string;
    virtualScroll: boolean;
    virtualScrollDelay: number;
    virtualRowHeight: number;
    frozenWidth: string;
    frozenColumns: any[];
    resizableColumns: boolean;
    columnResizeMode: string;
    reorderableColumns: boolean;
    contextMenu: any;
    rowTrackBy: Function;
    filters: {
        [s: string]: FilterMetadata;
    };
    globalFilterFields: string[];
    filterDelay: number;
    filterMode: string;
    onFilter: EventEmitter<any>;
    onNodeExpand: EventEmitter<any>;
    onNodeCollapse: EventEmitter<any>;
    onPage: EventEmitter<any>;
    onSort: EventEmitter<any>;
    onLazyLoad: EventEmitter<any>;
    sortFunction: EventEmitter<any>;
    onColResize: EventEmitter<any>;
    onColReorder: EventEmitter<any>;
    onNodeSelect: EventEmitter<any>;
    onNodeUnselect: EventEmitter<any>;
    onContextMenuSelect: EventEmitter<any>;
    onHeaderCheckboxToggle: EventEmitter<any>;
    onEditInit: EventEmitter<any>;
    onEditComplete: EventEmitter<any>;
    onEditCancel: EventEmitter<any>;
    containerViewChild: ElementRef;
    resizeHelperViewChild: ElementRef;
    reorderIndicatorUpViewChild: ElementRef;
    reorderIndicatorDownViewChild: ElementRef;
    tableViewChild: ElementRef;
    templates: QueryList<PrimeTemplate>;
    _value: TreeNode[];
    serializedValue: any[];
    _totalRecords: number;
    _multiSortMeta: SortMeta[];
    _sortField: string;
    _sortOrder: number;
    virtualScrollTimer: any;
    virtualScrollCallback: Function;
    filteredNodes: any[];
    filterTimeout: any;
    colGroupTemplate: TemplateRef<any>;
    captionTemplate: TemplateRef<any>;
    headerTemplate: TemplateRef<any>;
    bodyTemplate: TemplateRef<any>;
    loadingBodyTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    summaryTemplate: TemplateRef<any>;
    emptyMessageTemplate: TemplateRef<any>;
    paginatorLeftTemplate: TemplateRef<any>;
    paginatorRightTemplate: TemplateRef<any>;
    frozenHeaderTemplate: TemplateRef<any>;
    frozenBodyTemplate: TemplateRef<any>;
    frozenFooterTemplate: TemplateRef<any>;
    frozenColGroupTemplate: TemplateRef<any>;
    lastResizerHelperX: number;
    reorderIconWidth: number;
    reorderIconHeight: number;
    draggedColumn: any;
    dropPosition: number;
    preventSelectionSetterPropagation: boolean;
    _selection: any;
    selectionKeys: any;
    rowTouched: boolean;
    editingCell: Element;
    editingCellClick: boolean;
    documentEditListener: any;
    initialized: boolean;
    toggleRowIndex: number;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    constructor(el: ElementRef, zone: NgZone, tableService: TreeTableService);
    ngOnChanges(simpleChange: SimpleChanges): void;
    value: any[];
    updateSerializedValue(): void;
    serializeNodes(parent: any, nodes: any, level: any, visible: any): void;
    serializePageNodes(): void;
    totalRecords: number;
    sortField: string;
    sortOrder: number;
    multiSortMeta: SortMeta[];
    selection: any;
    updateSelectionKeys(): void;
    onPageChange(event: any): void;
    sort(event: any): void;
    sortSingle(): void;
    sortNodes(nodes: any): void;
    sortMultiple(): void;
    sortMultipleNodes(nodes: any): void;
    multisortField(node1: any, node2: any, multiSortMeta: any, index: any): any;
    getSortMeta(field: string): SortMeta;
    isSorted(field: string): boolean;
    createLazyLoadMetadata(): any;
    handleVirtualScroll(event: any): void;
    isEmpty(): boolean;
    getBlockableElement(): HTMLElement;
    onColumnResizeBegin(event: any): void;
    onColumnResize(event: any): void;
    onColumnResizeEnd(event: any, column: any): void;
    findParentScrollableView(column: any): any;
    resizeColGroup(table: any, resizeColumnIndex: any, newColumnWidth: any, nextColumnWidth: any): void;
    onColumnDragStart(event: any, columnElement: any): void;
    onColumnDragEnter(event: any, dropHeader: any): void;
    onColumnDragLeave(event: any): void;
    onColumnDrop(event: any, dropColumn: any): void;
    handleRowClick(event: any): void;
    handleRowTouchEnd(event: any): void;
    handleRowRightClick(event: any): void;
    toggleNodeWithCheckbox(event: any): void;
    toggleNodesWithCheckbox(event: Event, check: boolean): void;
    propagateSelectionUp(node: TreeNode, select: boolean): void;
    propagateSelectionDown(node: TreeNode, select: boolean): void;
    isSelected(node: any): boolean;
    findIndexInSelection(node: any): number;
    isSingleSelectionMode(): boolean;
    isMultipleSelectionMode(): boolean;
    equals(node1: any, node2: any): boolean;
    filter(value: any, field: any, matchMode: any): void;
    filterGlobal(value: any, matchMode: any): void;
    isFilterBlank(filter: any): boolean;
    _filter(): void;
    findFilteredNodes(node: any, paramsWithoutNode: any): boolean;
    isFilterMatched(node: any, { filterField, filterValue, filterConstraint, isStrictMode }: {
        filterField: any;
        filterValue: any;
        filterConstraint: any;
        isStrictMode: any;
    }): boolean;
    isNodeLeaf(node: any): boolean;
    hasFilter(): boolean;
    reset(): void;
    updateEditingCell(cell: any): void;
    isEditingCellValid(): boolean;
    bindDocumentEditListener(): void;
    unbindDocumentEditListener(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeTable>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeTable, "p-treeTable", never, {
    "lazy": "lazy";
    "first": "first";
    "pageLinks": "pageLinks";
    "alwaysShowPaginator": "alwaysShowPaginator";
    "paginatorPosition": "paginatorPosition";
    "defaultSortOrder": "defaultSortOrder";
    "sortMode": "sortMode";
    "resetPageOnSort": "resetPageOnSort";
    "contextMenuSelectionMode": "contextMenuSelectionMode";
    "compareSelectionBy": "compareSelectionBy";
    "loadingIcon": "loadingIcon";
    "showLoader": "showLoader";
    "virtualScrollDelay": "virtualScrollDelay";
    "virtualRowHeight": "virtualRowHeight";
    "columnResizeMode": "columnResizeMode";
    "rowTrackBy": "rowTrackBy";
    "filters": "filters";
    "filterDelay": "filterDelay";
    "filterMode": "filterMode";
    "totalRecords": "totalRecords";
    "value": "value";
    "sortField": "sortField";
    "sortOrder": "sortOrder";
    "multiSortMeta": "multiSortMeta";
    "selection": "selection";
    "rows": "rows";
    "contextMenuSelection": "contextMenuSelection";
    "columns": "columns";
    "style": "style";
    "styleClass": "styleClass";
    "autoLayout": "autoLayout";
    "paginator": "paginator";
    "rowsPerPageOptions": "rowsPerPageOptions";
    "paginatorDropdownAppendTo": "paginatorDropdownAppendTo";
    "customSort": "customSort";
    "selectionMode": "selectionMode";
    "dataKey": "dataKey";
    "metaKeySelection": "metaKeySelection";
    "rowHover": "rowHover";
    "loading": "loading";
    "scrollable": "scrollable";
    "scrollHeight": "scrollHeight";
    "virtualScroll": "virtualScroll";
    "frozenWidth": "frozenWidth";
    "frozenColumns": "frozenColumns";
    "resizableColumns": "resizableColumns";
    "reorderableColumns": "reorderableColumns";
    "contextMenu": "contextMenu";
    "globalFilterFields": "globalFilterFields";
}, {
    "selectionChange": "selectionChange";
    "contextMenuSelectionChange": "contextMenuSelectionChange";
    "onFilter": "onFilter";
    "onNodeExpand": "onNodeExpand";
    "onNodeCollapse": "onNodeCollapse";
    "onPage": "onPage";
    "onSort": "onSort";
    "onLazyLoad": "onLazyLoad";
    "sortFunction": "sortFunction";
    "onColResize": "onColResize";
    "onColReorder": "onColReorder";
    "onNodeSelect": "onNodeSelect";
    "onNodeUnselect": "onNodeUnselect";
    "onContextMenuSelect": "onContextMenuSelect";
    "onHeaderCheckboxToggle": "onHeaderCheckboxToggle";
    "onEditInit": "onEditInit";
    "onEditComplete": "onEditComplete";
    "onEditCancel": "onEditCancel";
}, ["templates"]>;
}
export declare class TTBody {
    tt: TreeTable;
    columns: any[];
    template: TemplateRef<any>;
    constructor(tt: TreeTable);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTBody>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TTBody, "[pTreeTableBody]", never, {
    "columns": "pTreeTableBody";
    "template": "pTreeTableBodyTemplate";
}, {}, never>;
}
export declare class TTScrollableView implements AfterViewInit, OnDestroy, AfterViewChecked {
    tt: TreeTable;
    el: ElementRef;
    zone: NgZone;
    columns: any[];
    frozen: boolean;
    scrollHeaderViewChild: ElementRef;
    scrollHeaderBoxViewChild: ElementRef;
    scrollBodyViewChild: ElementRef;
    scrollTableViewChild: ElementRef;
    scrollLoadingTableViewChild: ElementRef;
    scrollFooterViewChild: ElementRef;
    scrollFooterBoxViewChild: ElementRef;
    virtualScrollerViewChild: ElementRef;
    headerScrollListener: Function;
    bodyScrollListener: Function;
    footerScrollListener: Function;
    frozenSiblingBody: Element;
    _scrollHeight: string;
    subscription: Subscription;
    totalRecordsSubscription: Subscription;
    initialized: boolean;
    loadingArray: number[];
    constructor(tt: TreeTable, el: ElementRef, zone: NgZone);
    scrollHeight: string;
    ngAfterViewChecked(): void;
    ngAfterViewInit(): void;
    bindEvents(): void;
    unbindEvents(): void;
    onHeaderScroll(event: any): void;
    onFooterScroll(event: any): void;
    onBodyScroll(event: any): void;
    setScrollHeight(): void;
    setVirtualScrollerHeight(): void;
    hasVerticalOverflow(): boolean;
    alignScrollBar(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTScrollableView>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TTScrollableView, "[ttScrollableView]", never, {
    "scrollHeight": "scrollHeight";
    "columns": "ttScrollableView";
    "frozen": "frozen";
}, {}, never>;
}
export declare class TTSortableColumn implements OnInit, OnDestroy {
    tt: TreeTable;
    field: string;
    ttSortableColumnDisabled: boolean;
    sorted: boolean;
    subscription: Subscription;
    constructor(tt: TreeTable);
    ngOnInit(): void;
    updateSortState(): void;
    onClick(event: MouseEvent): void;
    onEnterKey(event: MouseEvent): void;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTSortableColumn>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TTSortableColumn, "[ttSortableColumn]", never, {
    "field": "ttSortableColumn";
    "ttSortableColumnDisabled": "ttSortableColumnDisabled";
}, {}, never>;
}
export declare class TTSortIcon implements OnInit, OnDestroy {
    tt: TreeTable;
    field: string;
    ariaLabelDesc: string;
    ariaLabelAsc: string;
    subscription: Subscription;
    sortOrder: number;
    constructor(tt: TreeTable);
    ngOnInit(): void;
    onClick(event: any): void;
    updateSortState(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTSortIcon>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TTSortIcon, "p-treeTableSortIcon", never, {
    "field": "field";
    "ariaLabelDesc": "ariaLabelDesc";
    "ariaLabelAsc": "ariaLabelAsc";
}, {}, never>;
}
export declare class TTResizableColumn implements AfterViewInit, OnDestroy {
    tt: TreeTable;
    el: ElementRef;
    zone: NgZone;
    ttResizableColumnDisabled: boolean;
    resizer: HTMLSpanElement;
    resizerMouseDownListener: any;
    documentMouseMoveListener: any;
    documentMouseUpListener: any;
    constructor(tt: TreeTable, el: ElementRef, zone: NgZone);
    ngAfterViewInit(): void;
    bindDocumentEvents(): void;
    unbindDocumentEvents(): void;
    onMouseDown(event: Event): void;
    onDocumentMouseMove(event: Event): void;
    onDocumentMouseUp(event: Event): void;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTResizableColumn>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TTResizableColumn, "[ttResizableColumn]", never, {
    "ttResizableColumnDisabled": "ttResizableColumnDisabled";
}, {}, never>;
}
export declare class TTReorderableColumn implements AfterViewInit, OnDestroy {
    tt: TreeTable;
    el: ElementRef;
    zone: NgZone;
    ttReorderableColumnDisabled: boolean;
    dragStartListener: any;
    dragOverListener: any;
    dragEnterListener: any;
    dragLeaveListener: any;
    mouseDownListener: any;
    constructor(tt: TreeTable, el: ElementRef, zone: NgZone);
    ngAfterViewInit(): void;
    bindEvents(): void;
    unbindEvents(): void;
    onMouseDown(event: any): void;
    onDragStart(event: any): void;
    onDragOver(event: any): void;
    onDragEnter(event: any): void;
    onDragLeave(event: any): void;
    onDrop(event: any): void;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTReorderableColumn>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TTReorderableColumn, "[ttReorderableColumn]", never, {
    "ttReorderableColumnDisabled": "ttReorderableColumnDisabled";
}, {}, never>;
}
export declare class TTSelectableRow implements OnInit, OnDestroy {
    tt: TreeTable;
    tableService: TreeTableService;
    rowNode: any;
    ttSelectableRowDisabled: boolean;
    selected: boolean;
    subscription: Subscription;
    constructor(tt: TreeTable, tableService: TreeTableService);
    ngOnInit(): void;
    onClick(event: Event): void;
    onEnterKey(event: KeyboardEvent): void;
    onTouchEnd(event: Event): void;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTSelectableRow>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TTSelectableRow, "[ttSelectableRow]", never, {
    "rowNode": "ttSelectableRow";
    "ttSelectableRowDisabled": "ttSelectableRowDisabled";
}, {}, never>;
}
export declare class TTSelectableRowDblClick implements OnInit, OnDestroy {
    tt: TreeTable;
    tableService: TreeTableService;
    rowNode: any;
    ttSelectableRowDisabled: boolean;
    selected: boolean;
    subscription: Subscription;
    constructor(tt: TreeTable, tableService: TreeTableService);
    ngOnInit(): void;
    onClick(event: Event): void;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTSelectableRowDblClick>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TTSelectableRowDblClick, "[ttSelectableRowDblClick]", never, {
    "rowNode": "ttSelectableRowDblClick";
    "ttSelectableRowDisabled": "ttSelectableRowDisabled";
}, {}, never>;
}
export declare class TTContextMenuRow {
    tt: TreeTable;
    tableService: TreeTableService;
    rowNode: any;
    ttContextMenuRowDisabled: boolean;
    selected: boolean;
    subscription: Subscription;
    constructor(tt: TreeTable, tableService: TreeTableService);
    onContextMenu(event: Event): void;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTContextMenuRow>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TTContextMenuRow, "[ttContextMenuRow]", never, {
    "rowNode": "ttContextMenuRow";
    "ttContextMenuRowDisabled": "ttContextMenuRowDisabled";
}, {}, never>;
}
export declare class TTCheckbox {
    tt: TreeTable;
    tableService: TreeTableService;
    disabled: boolean;
    rowNode: any;
    boxViewChild: ElementRef;
    checked: boolean;
    subscription: Subscription;
    constructor(tt: TreeTable, tableService: TreeTableService);
    ngOnInit(): void;
    onClick(event: Event): void;
    onFocus(): void;
    onBlur(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTCheckbox>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TTCheckbox, "p-treeTableCheckbox", never, {
    "disabled": "disabled";
    "rowNode": "value";
}, {}, never>;
}
export declare class TTHeaderCheckbox {
    tt: TreeTable;
    tableService: TreeTableService;
    boxViewChild: ElementRef;
    checked: boolean;
    disabled: boolean;
    selectionChangeSubscription: Subscription;
    valueChangeSubscription: Subscription;
    constructor(tt: TreeTable, tableService: TreeTableService);
    ngOnInit(): void;
    onClick(event: Event, checked: any): void;
    onFocus(): void;
    onBlur(): void;
    ngOnDestroy(): void;
    updateCheckedState(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTHeaderCheckbox>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TTHeaderCheckbox, "p-treeTableHeaderCheckbox", never, {}, {}, never>;
}
export declare class TTEditableColumn implements AfterViewInit {
    tt: TreeTable;
    el: ElementRef;
    zone: NgZone;
    data: any;
    field: any;
    ttEditableColumnDisabled: boolean;
    constructor(tt: TreeTable, el: ElementRef, zone: NgZone);
    ngAfterViewInit(): void;
    onClick(event: MouseEvent): void;
    openCell(): void;
    closeEditingCell(): void;
    onKeyDown(event: KeyboardEvent): void;
    findCell(element: any): any;
    moveToPreviousCell(event: KeyboardEvent): void;
    moveToNextCell(event: KeyboardEvent): void;
    findPreviousEditableColumn(cell: Element): any;
    findNextEditableColumn(cell: Element): any;
    isEnabled(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTEditableColumn>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TTEditableColumn, "[ttEditableColumn]", never, {
    "data": "ttEditableColumn";
    "field": "ttEditableColumnField";
    "ttEditableColumnDisabled": "ttEditableColumnDisabled";
}, {}, never>;
}
export declare class TreeTableCellEditor implements AfterContentInit {
    tt: TreeTable;
    editableColumn: TTEditableColumn;
    templates: QueryList<PrimeTemplate>;
    inputTemplate: TemplateRef<any>;
    outputTemplate: TemplateRef<any>;
    constructor(tt: TreeTable, editableColumn: TTEditableColumn);
    ngAfterContentInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeTableCellEditor>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeTableCellEditor, "p-treeTableCellEditor", never, {}, {}, ["templates"]>;
}
export declare class TTRow {
    tt: TreeTable;
    el: ElementRef;
    zone: NgZone;
    rowNode: any;
    constructor(tt: TreeTable, el: ElementRef, zone: NgZone);
    onKeyDown(event: KeyboardEvent): void;
    restoreFocus(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TTRow>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TTRow, "[ttRow]", never, {
    "rowNode": "ttRow";
}, {}, never>;
}
export declare class TreeTableToggler {
    tt: TreeTable;
    rowNode: any;
    constructor(tt: TreeTable);
    onClick(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeTableToggler>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeTableToggler, "p-treeTableToggler", never, {
    "rowNode": "rowNode";
}, {}, never>;
}
export declare class TreeTableModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TreeTableModule, [typeof TreeTable, typeof TreeTableToggler, typeof TTScrollableView, typeof TTBody, typeof TTSortableColumn, typeof TTSortIcon, typeof TTResizableColumn, typeof TTRow, typeof TTReorderableColumn, typeof TTSelectableRow, typeof TTSelectableRowDblClick, typeof TTContextMenuRow, typeof TTCheckbox, typeof TTHeaderCheckbox, typeof TTEditableColumn, typeof TreeTableCellEditor], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.PaginatorModule], [typeof TreeTable, typeof ɵngcc3.SharedModule, typeof TreeTableToggler, typeof TTSortableColumn, typeof TTSortIcon, typeof TTResizableColumn, typeof TTRow, typeof TTReorderableColumn, typeof TTSelectableRow, typeof TTSelectableRowDblClick, typeof TTContextMenuRow, typeof TTCheckbox, typeof TTHeaderCheckbox, typeof TTEditableColumn, typeof TreeTableCellEditor]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<TreeTableModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,