import { ElementRef, OnDestroy, OnInit, EventEmitter, Renderer2, ChangeDetectorRef, TemplateRef, QueryList, NgZone } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/button';
import * as ɵngcc3 from 'primeng/api';
export declare const CALENDAR_VALUE_ACCESSOR: any;
export interface LocaleSettings {
    firstDayOfWeek?: number;
    dayNames: string[];
    dayNamesShort: string[];
    dayNamesMin: string[];
    monthNames: string[];
    monthNamesShort: string[];
    today: string;
    clear: string;
    dateFormat?: string;
    weekHeader?: string;
}
export declare class Calendar implements OnInit, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    renderer: Renderer2;
    cd: ChangeDetectorRef;
    private zone;
    defaultDate: Date;
    style: any;
    styleClass: string;
    inputStyle: any;
    inputId: string;
    name: string;
    inputStyleClass: string;
    placeholder: string;
    ariaLabelledBy: string;
    disabled: any;
    dateFormat: string;
    multipleSeparator: string;
    rangeSeparator: string;
    inline: boolean;
    showOtherMonths: boolean;
    selectOtherMonths: boolean;
    showIcon: boolean;
    icon: string;
    appendTo: any;
    readonlyInput: boolean;
    shortYearCutoff: any;
    monthNavigator: boolean;
    yearNavigator: boolean;
    hourFormat: string;
    timeOnly: boolean;
    stepHour: number;
    stepMinute: number;
    stepSecond: number;
    showSeconds: boolean;
    required: boolean;
    showOnFocus: boolean;
    showWeek: boolean;
    dataType: string;
    selectionMode: string;
    maxDateCount: number;
    showButtonBar: boolean;
    todayButtonStyleClass: string;
    clearButtonStyleClass: string;
    autoZIndex: boolean;
    baseZIndex: number;
    panelStyleClass: string;
    panelStyle: any;
    keepInvalid: boolean;
    hideOnDateTimeSelect: boolean;
    numberOfMonths: number;
    view: string;
    touchUI: boolean;
    timeSeparator: string;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onClose: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onInput: EventEmitter<any>;
    onTodayClick: EventEmitter<any>;
    onClearClick: EventEmitter<any>;
    onMonthChange: EventEmitter<any>;
    onYearChange: EventEmitter<any>;
    onClickOutside: EventEmitter<any>;
    onShow: EventEmitter<any>;
    templates: QueryList<any>;
    _locale: LocaleSettings;
    tabindex: number;
    inputfieldViewChild: ElementRef;
    content: ElementRef;
    contentViewChild: ElementRef;
    value: any;
    dates: any[];
    months: any[];
    monthPickerValues: any[];
    weekDays: string[];
    currentMonth: number;
    currentYear: number;
    currentHour: number;
    currentMinute: number;
    currentSecond: number;
    pm: boolean;
    mask: HTMLDivElement;
    maskClickListener: Function;
    overlay: HTMLDivElement;
    overlayVisible: boolean;
    onModelChange: Function;
    onModelTouched: Function;
    calendarElement: any;
    timePickerTimer: any;
    documentClickListener: any;
    ticksTo1970: number;
    yearOptions: number[];
    focus: boolean;
    isKeydown: boolean;
    filled: boolean;
    inputFieldValue: string;
    _minDate: Date;
    _maxDate: Date;
    _showTime: boolean;
    _yearRange: string;
    preventDocumentListener: boolean;
    dateTemplate: TemplateRef<any>;
    _disabledDates: Array<Date>;
    _disabledDays: Array<number>;
    selectElement: any;
    todayElement: any;
    focusElement: any;
    documentResizeListener: any;
    navigationState: any;
    isMonthNavigate: boolean;
    minDate: Date;
    maxDate: Date;
    disabledDates: Date[];
    disabledDays: number[];
    yearRange: string;
    showTime: boolean;
    locale: LocaleSettings;
    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef, zone: NgZone);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    populateYearOptions(start: any, end: any): void;
    createWeekDays(): void;
    createMonthPickerValues(): void;
    createMonths(month: number, year: number): void;
    getWeekNumber(date: Date): number;
    createMonth(month: number, year: number): {
        month: number;
        year: number;
        dates: any[];
        weekNumbers: any[];
    };
    initTime(date: Date): void;
    navBackward(event: any): void;
    navForward(event: any): void;
    decrementYear(): void;
    incrementYear(): void;
    onDateSelect(event: any, dateMeta: any): void;
    shouldSelectDate(dateMeta: any): boolean;
    onMonthSelect(event: any, index: any): void;
    updateInputfield(): void;
    formatDateTime(date: any): any;
    selectDate(dateMeta: any): void;
    updateModel(value: any): void;
    getFirstDayOfMonthIndex(month: number, year: number): number;
    getDaysCountInMonth(month: number, year: number): number;
    getDaysCountInPrevMonth(month: number, year: number): number;
    getPreviousMonthAndYear(month: number, year: number): {
        'month': any;
        'year': any;
    };
    getNextMonthAndYear(month: number, year: number): {
        'month': any;
        'year': any;
    };
    getSundayIndex(): number;
    isSelected(dateMeta: any): boolean;
    isMonthSelected(month: number): boolean;
    isDateEquals(value: any, dateMeta: any): boolean;
    isDateBetween(start: any, end: any, dateMeta: any): boolean;
    isSingleSelection(): boolean;
    isRangeSelection(): boolean;
    isMultipleSelection(): boolean;
    isToday(today: any, day: any, month: any, year: any): boolean;
    isSelectable(day: any, month: any, year: any, otherMonth: any): boolean;
    isDateDisabled(day: number, month: number, year: number): boolean;
    isDayDisabled(day: number, month: number, year: number): boolean;
    onInputFocus(event: Event): void;
    onInputClick(event: Event): void;
    onInputBlur(event: Event): void;
    onButtonClick(event: any, inputfield: any): void;
    onPrevButtonClick(event: any): void;
    onNextButtonClick(event: any): void;
    onContainerButtonKeydown(event: any): void;
    onInputKeydown(event: any): void;
    onDateCellKeydown(event: any, date: any, groupIndex: any): void;
    onMonthCellKeydown(event: any, index: any): void;
    navigateToMonth(prev: any, groupIndex: any): void;
    updateFocus(): void;
    initFocusableCell(): void;
    trapFocus(event: any): void;
    onMonthDropdownChange(m: string): void;
    onYearDropdownChange(y: string): void;
    incrementHour(event: any): void;
    onTimePickerElementMouseDown(event: Event, type: number, direction: number): void;
    onTimePickerElementMouseUp(event: Event): void;
    onTimePickerElementMouseOut(event: Event): void;
    repeat(event: Event, interval: number, type: number, direction: number): void;
    clearTimePickerTimer(): void;
    decrementHour(event: any): void;
    validateHour(hour: any): boolean;
    incrementMinute(event: any): void;
    decrementMinute(event: any): void;
    validateMinute(minute: any): boolean;
    incrementSecond(event: any): void;
    decrementSecond(event: any): void;
    validateSecond(second: any): boolean;
    updateTime(): void;
    toggleAMPM(event: any): void;
    onUserInput(event: any): void;
    isValidSelection(value: any): boolean;
    parseValueFromString(text: string): Date | Date[];
    parseDateTime(text: any): Date;
    populateTime(value: any, timeString: any, ampm: any): void;
    updateUI(): void;
    showOverlay(): void;
    hideOverlay(): void;
    toggle(): void;
    onOverlayAnimationStart(event: AnimationEvent): void;
    onOverlayAnimationDone(event: AnimationEvent): void;
    appendOverlay(): void;
    restoreOverlayAppend(): void;
    alignOverlay(): void;
    enableModality(element: any): void;
    disableModality(): void;
    unbindMaskClickListener(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    getDateFormat(): string;
    formatDate(date: any, format: any): string;
    formatTime(date: any): string;
    parseTime(value: any): {
        hour: number;
        minute: number;
        second: number;
    };
    parseDate(value: any, format: any): any;
    daylightSavingAdjust(date: any): any;
    updateFilledState(): void;
    onTodayButtonClick(event: any): void;
    onClearButtonClick(event: any): void;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    isOutsideClicked(event: Event): boolean;
    isNavIconClicked(event: Event): boolean;
    onWindowResize(): void;
    onOverlayHide(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Calendar>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Calendar, "p-calendar", never, {
    "dateFormat": "dateFormat";
    "multipleSeparator": "multipleSeparator";
    "rangeSeparator": "rangeSeparator";
    "inline": "inline";
    "showOtherMonths": "showOtherMonths";
    "icon": "icon";
    "shortYearCutoff": "shortYearCutoff";
    "hourFormat": "hourFormat";
    "stepHour": "stepHour";
    "stepMinute": "stepMinute";
    "stepSecond": "stepSecond";
    "showSeconds": "showSeconds";
    "showOnFocus": "showOnFocus";
    "showWeek": "showWeek";
    "dataType": "dataType";
    "selectionMode": "selectionMode";
    "todayButtonStyleClass": "todayButtonStyleClass";
    "clearButtonStyleClass": "clearButtonStyleClass";
    "autoZIndex": "autoZIndex";
    "baseZIndex": "baseZIndex";
    "keepInvalid": "keepInvalid";
    "hideOnDateTimeSelect": "hideOnDateTimeSelect";
    "numberOfMonths": "numberOfMonths";
    "view": "view";
    "timeSeparator": "timeSeparator";
    "showTransitionOptions": "showTransitionOptions";
    "hideTransitionOptions": "hideTransitionOptions";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "disabledDates": "disabledDates";
    "disabledDays": "disabledDays";
    "yearRange": "yearRange";
    "showTime": "showTime";
    "locale": "locale";
    "disabled": "disabled";
    "defaultDate": "defaultDate";
    "style": "style";
    "styleClass": "styleClass";
    "inputStyle": "inputStyle";
    "inputId": "inputId";
    "name": "name";
    "inputStyleClass": "inputStyleClass";
    "placeholder": "placeholder";
    "ariaLabelledBy": "ariaLabelledBy";
    "selectOtherMonths": "selectOtherMonths";
    "showIcon": "showIcon";
    "appendTo": "appendTo";
    "readonlyInput": "readonlyInput";
    "monthNavigator": "monthNavigator";
    "yearNavigator": "yearNavigator";
    "timeOnly": "timeOnly";
    "required": "required";
    "maxDateCount": "maxDateCount";
    "showButtonBar": "showButtonBar";
    "panelStyleClass": "panelStyleClass";
    "panelStyle": "panelStyle";
    "touchUI": "touchUI";
    "tabindex": "tabindex";
}, {
    "onFocus": "onFocus";
    "onBlur": "onBlur";
    "onClose": "onClose";
    "onSelect": "onSelect";
    "onInput": "onInput";
    "onTodayClick": "onTodayClick";
    "onClearClick": "onClearClick";
    "onMonthChange": "onMonthChange";
    "onYearChange": "onYearChange";
    "onClickOutside": "onClickOutside";
    "onShow": "onShow";
}, ["templates"]>;
}
export declare class CalendarModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<CalendarModule, [typeof Calendar], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.ButtonModule, typeof ɵngcc3.SharedModule], [typeof Calendar, typeof ɵngcc2.ButtonModule, typeof ɵngcc3.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<CalendarModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,